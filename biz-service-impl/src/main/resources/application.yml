application:
  name: com.magicliang.transaction.sys

spring:
  profiles:
    # Spring 的 Profile 机制是为了隔离不同环境中的配置，参考：https://docs.spring.io/spring-boot/docs/2.6.2/reference/html/features.html#features.profiles
    # active: "@active-profile@"
    active: local-mariadb4j-dev
  # 数据库配置
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration
      # see: Gradle: ch.vorburger.mariaDB4j:mariaDB4j-springboot:2.4.0 spring.factories
      - ch.vorburger.mariadb4j.springboot.autoconfigure.MariaDB4jSpringConfiguration
      - ch.vorburger.mariadb4j.springboot.autoconfigure.DataSourceAutoConfiguration
      - org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration
  datasource:
    # 无法指定数据源的名称
    # name: masterDataSource
    # 默认就是hikari，可缺省
    # type: com.zaxxer.hikari.HikariDataSource
   # 这个 cj 的驱动是 8.0 的驱动，jdbc url 里如果带有 SSL 去访问 8.0 的 MySQL Server，可能触发 CLIENT_PLUGIN_AUTH 的告警启动异常
    # driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      pool-name: DomainDrivenTransacionSysHikariCP
      minimum-idle: 5
      maximum-pool-size: 30
      max-lifetime: 1800000
      connection-timeout: 1000
      #      username: root
      #      password: 123456
      connectionTestQuery: SELECT 1
  jpa:
    # 打印sql
    show-sql: false
    # h2 并不强依赖 jpa，这里姑且配一下
    hibernate:
      # 为了让 hibernate 的自动schema创建被禁用，只使用 spring 的 script-based initialization，要把 ddl-auto 给禁用
      ddl-auto: none

mybatis:
  configuration:
    mapUnderscoreToCamelCase: true
  #  config-location: classpath:mybatis-config.xml
  type-aliases-package: package com.magicliang.transaction.sys.common.dal.mybatis.po
#  type-handlers-package: com.example.typehandler

# 日志配置文件位置，默认的时候使用最严厉的 online配置，而不是松散的 offline 配置
logging:
  config: classpath:log4j2/log4j2-online.xml

common:
  # 对外开放的服务端口
  servicePort: 8411
  # 交易分布式锁的默认时长，单位为秒
  lockExpiration: 10
  mockMode: false

endpoints:
  sensitive: false
  docs:
    enabled: true

server:
  port: 8502
---
spring:
  config:
    activate:
      on-profile: local

common:
  env: test

# 日志配置文件位置
logging:
  # todo：记得加入软链接配置
  config: classpath:log4j2/log4j2-offline.xml
  # 只有线下的配置才可以在 logging 配置里面打印 debug 的 mybatis 的 sql 日志
  level.mapperpackagepath: debug # 打印mybatis的sql日志
---
spring:
  config:
    activate:
      on-profile: local-mariadb4j-dev
  datasource:
    # 如果要配置多数据源，则需要考虑在 datasource 里配置嵌套对象。
    master:
      schemaName: test_master
      port: 4306
      userName: root
      password: 12345678
      driver-class-name: org.mariadb.jdbc.Driver
    slave1:
      # 如果要使用逻辑分库，后缀名可以变也可以不变
      schemaName: test_slave1
      port: 4307
      userName: root
      password: 12345678
      driver-class-name: org.mariadb.jdbc.Driver
  # mariaDB4j 的配置，对单数据源可以这么配置
  # mariaDB4j:
  #Setting to blank will put db into a tmp directory and recreate every test run
  # dataDir:
  #Default is 3306, so using 3307 just in case it is already running on this machine
  # port: 3307
  # databaseName: man_opph_collector
  sql:
    init:
      # InputStream from = getClass().getClassLoader().getResourceAsStream(resource); 不需要 ddl classpath: 前缀
      schema-locations: sql/mysql/schema.ddl
      data-locations: sql/mysql/data.sql

common:
  env: dev
# 日志配置文件位置
logging:
  config: classpath:log4j2/log4j2-offline.xml
  level.mapperpackagepath: debug # 打印mybatis的sql日志
---
spring:
  config:
    activate:
      on-profile: local-mysql-dev
  datasource:
    # 如果要配置多数据源，则需要考虑在 datasource 里配置嵌套对象。
    master:
      jdbc-url: jdbc:mysql://127.0.0.1:3306/test_master?characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=true&autoReconnect=false&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull&useAffectedRows=true&allowMultiQueries=true&socketTimeout=1000&rewriteBatchedStatements=true&useCompression=true&connectTimeout=3000&maxRows=0&useUnicode=true&useDynamicCharsetInfo=false
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: root
      # 如果有必要使用xml配置数据源的话，使用 kms 的 bean reference 来管理 password
      password: 12345678
      pool-name: master-pool
    slave1:
      jdbc-url: jdbc:mysql://127.0.0.1:3306/test_slave?characterEncoding=utf-8&serverTimezone=Asia/Shanghai&useSSL=true&autoReconnect=false&failOverReadOnly=false&zeroDateTimeBehavior=convertToNull&useAffectedRows=true&allowMultiQueries=true&socketTimeout=1000&rewriteBatchedStatements=true&useCompression=true&connectTimeout=3000&maxRows=0&useUnicode=true&useDynamicCharsetInfo=false
      driver-class-name: com.mysql.cj.jdbc.Driver
      username: root
      # 如果有必要使用xml配置数据源的话，使用 kms 的 bean reference 来管理 password
      password: 12345678
      pool-name: slave-pool
common:
  env: dev
# 日志配置文件位置
logging:
  config: classpath:log4j2/log4j2-offline.xml
  level.mapperpackagepath: debug # 打印mybatis的sql日志
---
spring:
  config:
    activate:
      # 这个 profile 只能配合 h2 使用，h2 不兼容 MySQL DDL，暂时先不解决这个问题
      # 不要漏掉空格，不然会报：Reason: org.springframework.core.convert.ConverterNotFoundException: No converter found capable of converting from type [java.lang.String] to type [org.springframework.boot.context.config.ConfigDataProperties$Activate]
      on-profile: local-h2-dev
  autoconfigure:
    exclude:
      # 全局配置里排除了自动配置的数据源，这里做一个空排除作为 override，就可以继续使用 h2 数据源了
      - ch.vorburger.mariadb4j.springboot.autoconfigure.MariaDB4jSpringConfiguration
      - ch.vorburger.mariadb4j.springboot.autoconfigure.DataSourceAutoConfiguration
  datasource:
    # 纯内存的 db 如下
    username: sa
    password: pppp12345
    # 这个配置名是高版本 Spring 的配置名，和低版本 Spring  driver-class-name 语义一样
    driverClassName: org.h2.Driver
    # to disable automatic closing at VM shutdown, add ";DB_CLOSE_ON_EXIT=FALSE" to the db URL ;INIT=runscript from 'classpath:/db.sql'
    # 文件模式
    # url: jdbc:h2:file:~/test;mode=mysql
    # 内存模式
    url: jdbc:h2:mem:~/test;mode=mysql
    # 这两个配置在不如 sql.init 的子属性更新
    # schema: classpath:sql/schema.ddl
    # data:  classpath:sql/data.sql
    # 纯内存 db 的 url
    # url: jdbc:h2:mem:mydb

  # 参考：https://www.cnblogs.com/april-chen/p/11459322.html
  h2:
    # http://localhost:8502/h2-console
    console:
      enabled: true
      path: /h2-console
      settings:
        trace: false
        web-allow-others: false
  #    master:
  #      # 注意，整合多数据源时如果使用springboot默认的数据库连接池 Hikari，指定连接数据使用的是 jdbc-url 而不是 url 属性
  #      jdbc-url: jdbc:mysql://localhost:3306/test1?serverTimezone=UTC&useUnicode=true&characterEncoding=utf8&useSSL=false
  #      username: root
  #      password: 123456
  #      driver-class-name: com.mysql.cj.jdbc.Driver
  jpa:
    # 打印sql
    show-sql: true
    # h2 并不强依赖 jpa，这里姑且配一下
    spring.jpa.database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
    # 混合使用 hibernate 的 schema change 和 spring 的 schema initialization：This will ensure, that after Hibernate schema creation is performed then additionally schema.sql is read for any additional schema changes and data.sql is executed to populate the database.
    # defer-datasource-initialization: true
  sql:
    init:
      # 只有使用嵌入式数据库的时候，script-based initialization 才会执行，如果使用 always 则任何情况下 schema 都会被执行。
      # mode: always
      # mode: embedded
      # 配置上这两个文件，则 db 会自动初始化
      schema-locations: classpath:sql/h2/schema*.ddl
      data-locations: classpath:sql/h2/data.sql

common:
  env: test
  # mockMode: true

# 日志配置文件位置
logging:
  config: classpath:log4j2/log4j2-offline.xml
  level.mapperpackagepath: debug # 打印mybatis的sql日志
---
spring:
  # 替代配置
  # profiles:
  config:
    activate:
      on-profile: staging
common:
  env: staging
---
spring:
  config:
    activate:
      on-profile: prod
common:
  env: prod
