// 构建脚本
// gradle 官方不推荐这个脚本，但是把这个脚本拆解到子项目里比较麻烦：Some builds may contain a build.gradle(.kts) file in the root project but this
// is NOT recommended.
// Generally, a build script details build configuration, tasks, and plugins.

// 理论上不加入这个文件也是一个完整的项目，只要每个 module 拥有自己的 build.gradle 就行了。这个 build script 是为了 root project 或者 root module 准备的

// Spring boot 的最新官方文档：https://docs.spring.io/spring-boot/docs/current/reference/html/
// https://huangxshuo.github.io/2021/03/04/apply%20plugin%E5%92%8Cplugins%E4%B8%A4%E7%A7%8D%E5%BA%94%E7%94%A8gradle%E6%8F%92%E4%BB%B6%E7%9A%84%E5%8C%BA%E5%88%AB/

// 这是使用插件的新语法，不同于 apply plugin：如果是在官方仓库里能找到的插件，则 resolve 和 apply 可以用这种写法统一声明，这也实现了自动的 apply true
plugins {
    // 中文使用指南：https://www.jianshu.com/p/01588c396a29
    id 'org.springframework.boot' version '2.7.10'
    // 这两个版本是如何搭配的，是 initializr 决定的吗？
    id("io.spring.dependency-management") version "1.1.7"
    // 大于等于 java/java-library，支持一个 CLI application，能够 bootRun
    id 'application'
    id 'idea'
    // 这些配置会让我们的项目可以从根部进行 gradle clean build，然后也能生成 report

    // test 其实是一个 conventional test suit，它也是可配置的 https://docs.gradle.org/current/userguide/jvm_test_suite_plugin.html#sec:declare_an_additional_test_suite
    id 'jvm-test-suite'
    id 'test-report-aggregation'

    // Script plugins are Groovy DSL or Kotlin DSL scripts that are applied directly to a Gradle build script using the apply from: syntax. They are applied inline within a build script to add functionality or customize the build process. They are not recommended but it’s important to understand how to work:
    // apply from: 'https://sonatype.com/nexus3/repository/raw/gradle/nexus3_v7.gradle'
}

apply from: 'script-plugin.gradle'

group = 'com.magicliang'
version = '0.0.1-SNAPSHOT'


// 早期处理 lombok 需要这个配置才能让 gradlew build 通过，现在注释这段配置也可以
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // 全局项目也可以排除掉 logging 依赖，不过还是要让 subModule 排除掉更有效
}

repositories {
    // 参考：https://bbs.huaweicloud.com/blogs/257878
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://repo.huaweicloud.com/repository/maven" }
    mavenLocal()
    mavenCentral()
}

ext {
    // spring cloud 和 spring boot 的版本兼容性见：https://start.spring.io/actuator/info
    set('springCloudVersion', "2021.0.8")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    // 非官方版本的 starter 列表：https://www.javatpoint.com/spring-boot-starters
    // 这些依赖列在这里，不会影响 subProjects，其一般用处是，列出潜在的 starter 依赖列表
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
//    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
//    implementation 'org.springframework.boot:spring-boot-devtools'
//
//    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'io.projectreactor:reactor-test'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}


// 不在这一层使用这个配置，也能从根部运行全部的测试，但要运行具名的测试，需要 cd 到具体的目录下
//test {
//    // 这个配置很关键，会让 platform 找到 jupiter 包相关的测试
//    useJUnitPlatform()
//}

// 指定插件作用于子项目
subprojects {
    // 插件 apply plugin，version 语法不一样，在 subprojects 里只能用旧语法
    // 如果在上下文的一处已经做过 artifact version resolve 的动作，则在另一处（在本例中是 subproject 里）可以使用这种老式的放来来 apply plugin
    apply plugin: 'java'
    apply plugin: 'java-library'

    // 只要子项目激活这两个 plugin 就可以启动，但如果子模块没有这两个配置，则不能使用 bootJar 之类的配置
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    configurations {
//		all*.exclude group:'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        // 对排除 logback 而言，这个配置最有用，子项目必须排除掉这个依赖
        all*.exclude module: 'spring-boot-starter-logging'
//		all*.exclude group:'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    repositories {
        mavenCentral()
        // 要在本地编译自己的 jar 包，需要引入这个依赖
        mavenLocal()
    }
    // 标准地为子项目引入依赖的方式
    dependencies {
        // 不是本项目的 project，不能用 implementation project 坐标，只能用 implementation 坐标
        // 一般的依赖则使用 scope 别名来引用
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        // 让所有的子模块都拥有基本的 spring 依赖
        implementation 'org.springframework.boot:spring-boot-starter'
        // 这个依赖让底层能够拥有 log4j2，但并不去掉 logback 的影响
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'

        // api("com.google.code.gson:gson:2.10!!")
        api("com.google.code.gson:gson") {
            // @deprecated
            // force = true
            version {
                strictly("2.10")
            }
        }

        // 在这里实现了对 spring-boot-test jar 的引入，确切地讲，@SpringBootTest 这个注解依赖于本依赖
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
//					exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

        testCompileOnly 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    }

/*
 * 对于测试来讲，子项目的配置是更重要的，这个配置写在外面不生效
 * 关于复合 sourceSet，可以参考：
 * https://groups.google.com/g/adt-dev/c/EXdoKIMX0wg
 * https://docs.gradle.org/current/userguide/building_java_projects.html#sec:custom_java_source_set_paths
 * 分离单元测试和集成测试需要仔细阅读这几个帖子：
 * https://discuss.gradle.org/t/separate-execution-for-java-unit-and-integration-tests/8713
 * https://inspeerity.com/blog/separate-gradle-tasks-for-unit-and-integration-tests
 * https://docs.gradle.org/current/userguide/java_testing.html#sec:configuring_java_integration_tests
 * https://docs.gradle.org/current/userguide/jvm_test_suite_plugin.html#jvm_test_suite_plugin
 * 搜索关键词为：separate unit test and integration test
 */
    test {
        // 允许测试任务按照计算密集型（cpu-bound）的思路 fork process 执行
        maxParallelForks = Runtime.runtime.availableProcessors()

        /*
         * 这个配置很关键，会让 platform 找到 jupiter 包相关的测试，大致上是激活了 TestEngine 相关的功能，让我们不需要使用 @RunWith(JUnitPlatform.class) 相关的注解。
         * 当然，大部分的 IDE 或者 build tools 会自动识别和激活一个缺省的 runner，我们总能得到一个不知道是什么的 runner
         */
        useJUnitPlatform {
            // 这里面任意一个不打开，即可以让 jupiter 相关的 api 自动搜索到相关测试
//        includeEngines 'junit-vintage'
//        includeEngines 'junit-jupiter'
            // excludeEngines 'junit-jupiter'
            testLogging {
                events("passed", "skipped", "failed")
            }

        }
    }
//    task testReport(type: TestReport) {
////        destinationDir = file("$buildDir/reports/allTests")
//        // Include the results from the `test` task in all subprojects
//    }
}

bootJar {
    // 每个可以被部署和发布的子模块成为一个 bootJar
    enabled = false
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}


// make aggregate test report generation part of the 'check' lifecycle phase
tasks.named('check') {
    dependsOn tasks.named('testAggregateTestReport', TestReport)
}

// 这个配置在当代的 gradle 里暂时占不到用处了，$buildDir 专指每个 module 的 build
//task testReport(type: TestReport) {
//    destinationDir = file("$buildDir/reports/allTests")
////     Include the results from the `test` task in all subprojects
//}

//// Configuring the wrapper, the old way (gradle < 4.8 )
//// see https://docs.gradle.org/4.4/userguide/gradle_wrapper.html#sec:wrapper_generation
//task wrapper(type: Wrapper) {
//	gradleVersion = '4.4'
//	distributionType = Wrapper.DistributionType.BIN
//}

// Configuring the wrapper, the new way (since Gradle 4.8)
// see https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
wrapper {
    gradleVersion = '8.6'
    distributionType = Wrapper.DistributionType.BIN
}
