// Spring boot 的最新官方文档：https://docs.spring.io/spring-boot/docs/current/reference/html/
plugins {
    id 'org.springframework.boot' version '2.7.4'
    // 这两个版本是如何搭配的，是 initializr 决定的吗？
    id 'io.spring.dependency-management' version '1.0.14.RELEASE'
    id 'java'
    id 'java-library'
}

group = 'com.magicliang'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

// 需要这个配置才能让 gradlew build 通过
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    // 全局项目也可以排除掉 logging 依赖，不过还是要让 subModule 排除掉更有效
}

repositories {
    // 参考：https://bbs.huaweicloud.com/blogs/257878
    maven { url "https://maven.aliyun.com/repository/public" }
    maven { url "https://repo.huaweicloud.com/repository/maven" }
    mavenLocal()
    mavenCentral()
}

ext {
    // spring cloud 和 spring boot 的版本兼容性见：https://start.spring.io/actuator/info
    set('springCloudVersion', "2021.0.4")
}

dependencies {
    // 非官方版本的 starter 列表：https://www.javatpoint.com/spring-boot-starters
    // 这些依赖列在这里，不会影响 subProjects，其一般用处是，列出潜在的 starter 依赖列表
//    implementation 'org.springframework.boot:spring-boot-starter-actuator'
//    implementation 'org.springframework.boot:spring-boot-starter-webflux'
//    implementation 'org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j'
//    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
//    implementation 'org.springframework.boot:spring-boot-devtools'
//
//    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
//    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'io.projectreactor:reactor-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}

// 指定插件作用于子项目
subprojects {
    // 插件 apply plugin，version 语法不一样
    apply plugin: 'java'
    apply plugin: 'java-library'

    // 只要子项目激活这两个 plugin 就可以启动，但如果子模块没有这两个配置，则不能使用 bootJar 之类的配置
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    configurations {
//		all*.exclude group:'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
        // 对排除 logback 而言，这个配置最有用，子项目必须排除掉这个依赖
        all*.exclude module: 'spring-boot-starter-logging'
//		all*.exclude group:'org.springframework.boot', module: 'spring-boot-starter-logging'
    }

    repositories {
        mavenCentral()
        // 要在本地编译自己的 jar 包，需要引入这个依赖
        mavenLocal()
    }
    // 标准地为子项目引入依赖的方式
    dependencies {
        // 不是本项目的 project，不能用 implementation project 坐标，只能用 implementation 坐标
        // 一般的依赖则使用 scope 别名来引用
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        // 让所有的子模块都拥有基本的 spring 依赖
        implementation 'org.springframework.boot:spring-boot-starter'
        // 这个依赖让底层能够拥有 log4j2，但并不去掉 logback 的影响
        implementation 'org.springframework.boot:spring-boot-starter-log4j2'

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
//					exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
//        testCompileOnly 'org.junit.jupiter:junit-jupiter-api:5.7.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'

        testCompileOnly 'org.projectlombok:lombok:1.18.24'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
    }

    test {
        useJUnitPlatform()
    }
}

bootJar {
    // 每个可以被部署和发布的子模块成为一个 bootJar
    enabled = false
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

//// Configuring the wrapper, the old way (gradle < 4.8 )
//// see https://docs.gradle.org/4.4/userguide/gradle_wrapper.html#sec:wrapper_generation
//task wrapper(type: Wrapper) {
//	gradleVersion = '4.4'
//	distributionType = Wrapper.DistributionType.BIN
//}

// Configuring the wrapper, the new way (since Gradle 4.8)
// see https://docs.gradle.org/current/userguide/gradle_wrapper.html#customizing_wrapper
wrapper {
    gradleVersion = '7.5'
    distributionType = Wrapper.DistributionType.BIN
}
