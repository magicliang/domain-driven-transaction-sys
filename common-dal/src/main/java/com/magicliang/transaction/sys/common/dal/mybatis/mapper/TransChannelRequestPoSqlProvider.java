package com.magicliang.transaction.sys.common.dal.mybatis.mapper;

import com.magicliang.transaction.sys.common.dal.mybatis.po.TransChannelRequestPoExample;
import com.magicliang.transaction.sys.common.dal.mybatis.po.TransChannelRequestPoExample.Criteria;
import com.magicliang.transaction.sys.common.dal.mybatis.po.TransChannelRequestPoExample.Criterion;
import com.magicliang.transaction.sys.common.dal.mybatis.po.TransChannelRequestPoWithBLOBs;
import org.apache.ibatis.jdbc.SQL;

import java.util.List;
import java.util.Map;

public class TransChannelRequestPoSqlProvider {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String countByExample(TransChannelRequestPoExample example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("tb_trans_channel_request");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String deleteByExample(TransChannelRequestPoExample example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("tb_trans_channel_request");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String insertSelective(TransChannelRequestPoWithBLOBs record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("tb_trans_channel_request");

        if (record.getGmtCreated() != null) {
            sql.VALUES("gmt_created", "#{gmtCreated,jdbcType=TIMESTAMP}");
        }

        if (record.getGmtModified() != null) {
            sql.VALUES("gmt_modified", "#{gmtModified,jdbcType=TIMESTAMP}");
        }

        if (record.getPayOrderNo() != null) {
            sql.VALUES("pay_order_no", "#{payOrderNo,jdbcType=BIGINT}");
        }

        if (record.getRequestType() != null) {
            sql.VALUES("request_type", "#{requestType,jdbcType=INTEGER}");
        }

        if (record.getBizIdentifyNo() != null) {
            sql.VALUES("biz_identify_no", "#{bizIdentifyNo,jdbcType=VARCHAR}");
        }

        if (record.getBizUniqueNo() != null) {
            sql.VALUES("biz_unique_no", "#{bizUniqueNo,jdbcType=VARCHAR}");
        }

        if (record.getGmtNextExecution() != null) {
            sql.VALUES("gmt_next_execution", "#{gmtNextExecution,jdbcType=TIMESTAMP}");
        }

        if (record.getRetryCount() != null) {
            sql.VALUES("retry_count", "#{retryCount,jdbcType=BIGINT}");
        }

        if (record.getRequestAddr() != null) {
            sql.VALUES("request_addr", "#{requestAddr,jdbcType=VARCHAR}");
        }

        if (record.getStatus() != null) {
            sql.VALUES("status", "#{status,jdbcType=INTEGER}");
        }

        if (record.getCloseReason() != null) {
            sql.VALUES("close_reason", "#{closeReason,jdbcType=INTEGER}");
        }

        if (record.getGmtLastExecution() != null) {
            sql.VALUES("gmt_last_execution", "#{gmtLastExecution,jdbcType=TIMESTAMP}");
        }

        if (record.getEnv() != null) {
            sql.VALUES("env", "#{env,jdbcType=INTEGER}");
        }

        if (record.getRequestParams() != null) {
            sql.VALUES("request_params", "#{requestParams,jdbcType=LONGVARCHAR}");
        }

        if (record.getRequestResponse() != null) {
            sql.VALUES("request_response", "#{requestResponse,jdbcType=LONGVARCHAR}");
        }

        if (record.getCallbackParams() != null) {
            sql.VALUES("callback_params", "#{callbackParams,jdbcType=LONGVARCHAR}");
        }

        if (record.getRequestException() != null) {
            sql.VALUES("request_exception", "#{requestException,jdbcType=LONGVARCHAR}");
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String selectByExampleWithBLOBs(TransChannelRequestPoExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("gmt_created");
        sql.SELECT("gmt_modified");
        sql.SELECT("pay_order_no");
        sql.SELECT("request_type");
        sql.SELECT("biz_identify_no");
        sql.SELECT("biz_unique_no");
        sql.SELECT("gmt_next_execution");
        sql.SELECT("retry_count");
        sql.SELECT("request_addr");
        sql.SELECT("status");
        sql.SELECT("close_reason");
        sql.SELECT("gmt_last_execution");
        sql.SELECT("env");
        sql.SELECT("request_params");
        sql.SELECT("request_response");
        sql.SELECT("callback_params");
        sql.SELECT("request_exception");
        sql.FROM("tb_trans_channel_request");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String selectByExample(TransChannelRequestPoExample example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("gmt_created");
        sql.SELECT("gmt_modified");
        sql.SELECT("pay_order_no");
        sql.SELECT("request_type");
        sql.SELECT("biz_identify_no");
        sql.SELECT("biz_unique_no");
        sql.SELECT("gmt_next_execution");
        sql.SELECT("retry_count");
        sql.SELECT("request_addr");
        sql.SELECT("status");
        sql.SELECT("close_reason");
        sql.SELECT("gmt_last_execution");
        sql.SELECT("env");
        sql.FROM("tb_trans_channel_request");
        applyWhere(sql, example, false);

        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        TransChannelRequestPoWithBLOBs record = (TransChannelRequestPoWithBLOBs) parameter.get("record");
        TransChannelRequestPoExample example = (TransChannelRequestPoExample) parameter.get("example");

        SQL sql = new SQL();
        sql.UPDATE("tb_trans_channel_request");

        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=BIGINT}");
        }

        if (record.getGmtCreated() != null) {
            sql.SET("gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP}");
        }

        if (record.getGmtModified() != null) {
            sql.SET("gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP}");
        }

        if (record.getPayOrderNo() != null) {
            sql.SET("pay_order_no = #{record.payOrderNo,jdbcType=BIGINT}");
        }

        if (record.getRequestType() != null) {
            sql.SET("request_type = #{record.requestType,jdbcType=INTEGER}");
        }

        if (record.getBizIdentifyNo() != null) {
            sql.SET("biz_identify_no = #{record.bizIdentifyNo,jdbcType=VARCHAR}");
        }

        if (record.getBizUniqueNo() != null) {
            sql.SET("biz_unique_no = #{record.bizUniqueNo,jdbcType=VARCHAR}");
        }

        if (record.getGmtNextExecution() != null) {
            sql.SET("gmt_next_execution = #{record.gmtNextExecution,jdbcType=TIMESTAMP}");
        }

        if (record.getRetryCount() != null) {
            sql.SET("retry_count = #{record.retryCount,jdbcType=BIGINT}");
        }

        if (record.getRequestAddr() != null) {
            sql.SET("request_addr = #{record.requestAddr,jdbcType=VARCHAR}");
        }

        if (record.getStatus() != null) {
            sql.SET("status = #{record.status,jdbcType=INTEGER}");
        }

        if (record.getCloseReason() != null) {
            sql.SET("close_reason = #{record.closeReason,jdbcType=INTEGER}");
        }

        if (record.getGmtLastExecution() != null) {
            sql.SET("gmt_last_execution = #{record.gmtLastExecution,jdbcType=TIMESTAMP}");
        }

        if (record.getEnv() != null) {
            sql.SET("env = #{record.env,jdbcType=INTEGER}");
        }

        if (record.getRequestParams() != null) {
            sql.SET("request_params = #{record.requestParams,jdbcType=LONGVARCHAR}");
        }

        if (record.getRequestResponse() != null) {
            sql.SET("request_response = #{record.requestResponse,jdbcType=LONGVARCHAR}");
        }

        if (record.getCallbackParams() != null) {
            sql.SET("callback_params = #{record.callbackParams,jdbcType=LONGVARCHAR}");
        }

        if (record.getRequestException() != null) {
            sql.SET("request_exception = #{record.requestException,jdbcType=LONGVARCHAR}");
        }

        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tb_trans_channel_request");

        sql.SET("id = #{record.id,jdbcType=BIGINT}");
        sql.SET("gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP}");
        sql.SET("gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP}");
        sql.SET("pay_order_no = #{record.payOrderNo,jdbcType=BIGINT}");
        sql.SET("request_type = #{record.requestType,jdbcType=INTEGER}");
        sql.SET("biz_identify_no = #{record.bizIdentifyNo,jdbcType=VARCHAR}");
        sql.SET("biz_unique_no = #{record.bizUniqueNo,jdbcType=VARCHAR}");
        sql.SET("gmt_next_execution = #{record.gmtNextExecution,jdbcType=TIMESTAMP}");
        sql.SET("retry_count = #{record.retryCount,jdbcType=BIGINT}");
        sql.SET("request_addr = #{record.requestAddr,jdbcType=VARCHAR}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("close_reason = #{record.closeReason,jdbcType=INTEGER}");
        sql.SET("gmt_last_execution = #{record.gmtLastExecution,jdbcType=TIMESTAMP}");
        sql.SET("env = #{record.env,jdbcType=INTEGER}");
        sql.SET("request_params = #{record.requestParams,jdbcType=LONGVARCHAR}");
        sql.SET("request_response = #{record.requestResponse,jdbcType=LONGVARCHAR}");
        sql.SET("callback_params = #{record.callbackParams,jdbcType=LONGVARCHAR}");
        sql.SET("request_exception = #{record.requestException,jdbcType=LONGVARCHAR}");

        TransChannelRequestPoExample example = (TransChannelRequestPoExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("tb_trans_channel_request");

        sql.SET("id = #{record.id,jdbcType=BIGINT}");
        sql.SET("gmt_created = #{record.gmtCreated,jdbcType=TIMESTAMP}");
        sql.SET("gmt_modified = #{record.gmtModified,jdbcType=TIMESTAMP}");
        sql.SET("pay_order_no = #{record.payOrderNo,jdbcType=BIGINT}");
        sql.SET("request_type = #{record.requestType,jdbcType=INTEGER}");
        sql.SET("biz_identify_no = #{record.bizIdentifyNo,jdbcType=VARCHAR}");
        sql.SET("biz_unique_no = #{record.bizUniqueNo,jdbcType=VARCHAR}");
        sql.SET("gmt_next_execution = #{record.gmtNextExecution,jdbcType=TIMESTAMP}");
        sql.SET("retry_count = #{record.retryCount,jdbcType=BIGINT}");
        sql.SET("request_addr = #{record.requestAddr,jdbcType=VARCHAR}");
        sql.SET("status = #{record.status,jdbcType=INTEGER}");
        sql.SET("close_reason = #{record.closeReason,jdbcType=INTEGER}");
        sql.SET("gmt_last_execution = #{record.gmtLastExecution,jdbcType=TIMESTAMP}");
        sql.SET("env = #{record.env,jdbcType=INTEGER}");

        TransChannelRequestPoExample example = (TransChannelRequestPoExample) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    public String updateByPrimaryKeySelective(TransChannelRequestPoWithBLOBs record) {
        SQL sql = new SQL();
        sql.UPDATE("tb_trans_channel_request");

        if (record.getGmtCreated() != null) {
            sql.SET("gmt_created = #{gmtCreated,jdbcType=TIMESTAMP}");
        }

        if (record.getGmtModified() != null) {
            sql.SET("gmt_modified = #{gmtModified,jdbcType=TIMESTAMP}");
        }

        if (record.getPayOrderNo() != null) {
            sql.SET("pay_order_no = #{payOrderNo,jdbcType=BIGINT}");
        }

        if (record.getRequestType() != null) {
            sql.SET("request_type = #{requestType,jdbcType=INTEGER}");
        }

        if (record.getBizIdentifyNo() != null) {
            sql.SET("biz_identify_no = #{bizIdentifyNo,jdbcType=VARCHAR}");
        }

        if (record.getBizUniqueNo() != null) {
            sql.SET("biz_unique_no = #{bizUniqueNo,jdbcType=VARCHAR}");
        }

        if (record.getGmtNextExecution() != null) {
            sql.SET("gmt_next_execution = #{gmtNextExecution,jdbcType=TIMESTAMP}");
        }

        if (record.getRetryCount() != null) {
            sql.SET("retry_count = #{retryCount,jdbcType=BIGINT}");
        }

        if (record.getRequestAddr() != null) {
            sql.SET("request_addr = #{requestAddr,jdbcType=VARCHAR}");
        }

        if (record.getStatus() != null) {
            sql.SET("status = #{status,jdbcType=INTEGER}");
        }

        if (record.getCloseReason() != null) {
            sql.SET("close_reason = #{closeReason,jdbcType=INTEGER}");
        }

        if (record.getGmtLastExecution() != null) {
            sql.SET("gmt_last_execution = #{gmtLastExecution,jdbcType=TIMESTAMP}");
        }

        if (record.getEnv() != null) {
            sql.SET("env = #{env,jdbcType=INTEGER}");
        }

        if (record.getRequestParams() != null) {
            sql.SET("request_params = #{requestParams,jdbcType=LONGVARCHAR}");
        }

        if (record.getRequestResponse() != null) {
            sql.SET("request_response = #{requestResponse,jdbcType=LONGVARCHAR}");
        }

        if (record.getCallbackParams() != null) {
            sql.SET("callback_params = #{callbackParams,jdbcType=LONGVARCHAR}");
        }

        if (record.getRequestException() != null) {
            sql.SET("request_exception = #{requestException,jdbcType=LONGVARCHAR}");
        }

        sql.WHERE("id = #{id,jdbcType=BIGINT}");

        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    protected void applyWhere(SQL sql, TransChannelRequestPoExample example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }

        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }

        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }

                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }

                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }

        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}