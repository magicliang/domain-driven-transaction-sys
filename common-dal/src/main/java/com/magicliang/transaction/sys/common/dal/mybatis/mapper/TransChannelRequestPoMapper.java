package com.magicliang.transaction.sys.common.dal.mybatis.mapper;

import com.magicliang.transaction.sys.common.dal.mybatis.po.TransChannelRequestPo;
import com.magicliang.transaction.sys.common.dal.mybatis.po.TransChannelRequestPoExample;
import com.magicliang.transaction.sys.common.dal.mybatis.po.TransChannelRequestPoWithBLOBs;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;

import java.util.List;

public interface TransChannelRequestPoMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @SelectProvider(type = TransChannelRequestPoSqlProvider.class, method = "countByExample")
    long countByExample(TransChannelRequestPoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @DeleteProvider(type = TransChannelRequestPoSqlProvider.class, method = "deleteByExample")
    int deleteByExample(TransChannelRequestPoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @Delete({
            "delete from tb_trans_channel_request",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @Insert({
            "insert into tb_trans_channel_request (gmt_created, gmt_modified, ",
            "pay_order_no, request_type, ",
            "biz_identify_no, biz_unique_no, ",
            "gmt_next_execution, retry_count, ",
            "request_addr, status, ",
            "close_reason, gmt_last_execution, ",
            "env, request_params, ",
            "request_response, callback_params, ",
            "request_exception)",
            "values (#{gmtCreated,jdbcType=TIMESTAMP}, #{gmtModified,jdbcType=TIMESTAMP}, ",
            "#{payOrderNo,jdbcType=BIGINT}, #{requestType,jdbcType=INTEGER}, ",
            "#{bizIdentifyNo,jdbcType=VARCHAR}, #{bizUniqueNo,jdbcType=VARCHAR}, ",
            "#{gmtNextExecution,jdbcType=TIMESTAMP}, #{retryCount,jdbcType=BIGINT}, ",
            "#{requestAddr,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER}, ",
            "#{closeReason,jdbcType=INTEGER}, #{gmtLastExecution,jdbcType=TIMESTAMP}, ",
            "#{env,jdbcType=INTEGER}, #{requestParams,jdbcType=LONGVARCHAR}, ",
            "#{requestResponse,jdbcType=LONGVARCHAR}, #{callbackParams,jdbcType=LONGVARCHAR}, ",
            "#{requestException,jdbcType=LONGVARCHAR})"
    })
    @SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Long.class)
    int insert(TransChannelRequestPoWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @InsertProvider(type = TransChannelRequestPoSqlProvider.class, method = "insertSelective")
    @SelectKey(statement = "SELECT LAST_INSERT_ID()", keyProperty = "id", before = false, resultType = Long.class)
    int insertSelective(TransChannelRequestPoWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @SelectProvider(type = TransChannelRequestPoSqlProvider.class, method = "selectByExampleWithBLOBs")
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "gmt_created", property = "gmtCreated", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "gmt_modified", property = "gmtModified", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "pay_order_no", property = "payOrderNo", jdbcType = JdbcType.BIGINT),
            @Result(column = "request_type", property = "requestType", jdbcType = JdbcType.INTEGER),
            @Result(column = "biz_identify_no", property = "bizIdentifyNo", jdbcType = JdbcType.VARCHAR),
            @Result(column = "biz_unique_no", property = "bizUniqueNo", jdbcType = JdbcType.VARCHAR),
            @Result(column = "gmt_next_execution", property = "gmtNextExecution", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "retry_count", property = "retryCount", jdbcType = JdbcType.BIGINT),
            @Result(column = "request_addr", property = "requestAddr", jdbcType = JdbcType.VARCHAR),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "close_reason", property = "closeReason", jdbcType = JdbcType.INTEGER),
            @Result(column = "gmt_last_execution", property = "gmtLastExecution", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "env", property = "env", jdbcType = JdbcType.INTEGER),
            @Result(column = "request_params", property = "requestParams", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "request_response", property = "requestResponse", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "callback_params", property = "callbackParams", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "request_exception", property = "requestException", jdbcType = JdbcType.LONGVARCHAR)
    })
    List<TransChannelRequestPoWithBLOBs> selectByExampleWithBLOBs(TransChannelRequestPoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @SelectProvider(type = TransChannelRequestPoSqlProvider.class, method = "selectByExample")
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "gmt_created", property = "gmtCreated", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "gmt_modified", property = "gmtModified", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "pay_order_no", property = "payOrderNo", jdbcType = JdbcType.BIGINT),
            @Result(column = "request_type", property = "requestType", jdbcType = JdbcType.INTEGER),
            @Result(column = "biz_identify_no", property = "bizIdentifyNo", jdbcType = JdbcType.VARCHAR),
            @Result(column = "biz_unique_no", property = "bizUniqueNo", jdbcType = JdbcType.VARCHAR),
            @Result(column = "gmt_next_execution", property = "gmtNextExecution", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "retry_count", property = "retryCount", jdbcType = JdbcType.BIGINT),
            @Result(column = "request_addr", property = "requestAddr", jdbcType = JdbcType.VARCHAR),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "close_reason", property = "closeReason", jdbcType = JdbcType.INTEGER),
            @Result(column = "gmt_last_execution", property = "gmtLastExecution", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "env", property = "env", jdbcType = JdbcType.INTEGER)
    })
    List<TransChannelRequestPo> selectByExample(TransChannelRequestPoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @Select({
            "select",
            "id, gmt_created, gmt_modified, pay_order_no, request_type, biz_identify_no, ",
            "biz_unique_no, gmt_next_execution, retry_count, request_addr, status, close_reason, ",
            "gmt_last_execution, env, request_params, request_response, callback_params, ",
            "request_exception",
            "from tb_trans_channel_request",
            "where id = #{id,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column = "id", property = "id", jdbcType = JdbcType.BIGINT, id = true),
            @Result(column = "gmt_created", property = "gmtCreated", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "gmt_modified", property = "gmtModified", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "pay_order_no", property = "payOrderNo", jdbcType = JdbcType.BIGINT),
            @Result(column = "request_type", property = "requestType", jdbcType = JdbcType.INTEGER),
            @Result(column = "biz_identify_no", property = "bizIdentifyNo", jdbcType = JdbcType.VARCHAR),
            @Result(column = "biz_unique_no", property = "bizUniqueNo", jdbcType = JdbcType.VARCHAR),
            @Result(column = "gmt_next_execution", property = "gmtNextExecution", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "retry_count", property = "retryCount", jdbcType = JdbcType.BIGINT),
            @Result(column = "request_addr", property = "requestAddr", jdbcType = JdbcType.VARCHAR),
            @Result(column = "status", property = "status", jdbcType = JdbcType.INTEGER),
            @Result(column = "close_reason", property = "closeReason", jdbcType = JdbcType.INTEGER),
            @Result(column = "gmt_last_execution", property = "gmtLastExecution", jdbcType = JdbcType.TIMESTAMP),
            @Result(column = "env", property = "env", jdbcType = JdbcType.INTEGER),
            @Result(column = "request_params", property = "requestParams", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "request_response", property = "requestResponse", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "callback_params", property = "callbackParams", jdbcType = JdbcType.LONGVARCHAR),
            @Result(column = "request_exception", property = "requestException", jdbcType = JdbcType.LONGVARCHAR)
    })
    TransChannelRequestPoWithBLOBs selectByPrimaryKey(Long id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @UpdateProvider(type = TransChannelRequestPoSqlProvider.class, method = "updateByExampleSelective")
    int updateByExampleSelective(@Param("record") TransChannelRequestPoWithBLOBs record, @Param("example") TransChannelRequestPoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @UpdateProvider(type = TransChannelRequestPoSqlProvider.class, method = "updateByExampleWithBLOBs")
    int updateByExampleWithBLOBs(@Param("record") TransChannelRequestPoWithBLOBs record, @Param("example") TransChannelRequestPoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @UpdateProvider(type = TransChannelRequestPoSqlProvider.class, method = "updateByExample")
    int updateByExample(@Param("record") TransChannelRequestPo record, @Param("example") TransChannelRequestPoExample example);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @UpdateProvider(type = TransChannelRequestPoSqlProvider.class, method = "updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(TransChannelRequestPoWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @Update({
            "update tb_trans_channel_request",
            "set gmt_created = #{gmtCreated,jdbcType=TIMESTAMP},",
            "gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},",
            "pay_order_no = #{payOrderNo,jdbcType=BIGINT},",
            "request_type = #{requestType,jdbcType=INTEGER},",
            "biz_identify_no = #{bizIdentifyNo,jdbcType=VARCHAR},",
            "biz_unique_no = #{bizUniqueNo,jdbcType=VARCHAR},",
            "gmt_next_execution = #{gmtNextExecution,jdbcType=TIMESTAMP},",
            "retry_count = #{retryCount,jdbcType=BIGINT},",
            "request_addr = #{requestAddr,jdbcType=VARCHAR},",
            "status = #{status,jdbcType=INTEGER},",
            "close_reason = #{closeReason,jdbcType=INTEGER},",
            "gmt_last_execution = #{gmtLastExecution,jdbcType=TIMESTAMP},",
            "env = #{env,jdbcType=INTEGER},",
            "request_params = #{requestParams,jdbcType=LONGVARCHAR},",
            "request_response = #{requestResponse,jdbcType=LONGVARCHAR},",
            "callback_params = #{callbackParams,jdbcType=LONGVARCHAR},",
            "request_exception = #{requestException,jdbcType=LONGVARCHAR}",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKeyWithBLOBs(TransChannelRequestPoWithBLOBs record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table tb_trans_channel_request
     *
     * @mbg.generated Wed Jan 26 17:49:11 CST 2022
     */
    @Update({
            "update tb_trans_channel_request",
            "set gmt_created = #{gmtCreated,jdbcType=TIMESTAMP},",
            "gmt_modified = #{gmtModified,jdbcType=TIMESTAMP},",
            "pay_order_no = #{payOrderNo,jdbcType=BIGINT},",
            "request_type = #{requestType,jdbcType=INTEGER},",
            "biz_identify_no = #{bizIdentifyNo,jdbcType=VARCHAR},",
            "biz_unique_no = #{bizUniqueNo,jdbcType=VARCHAR},",
            "gmt_next_execution = #{gmtNextExecution,jdbcType=TIMESTAMP},",
            "retry_count = #{retryCount,jdbcType=BIGINT},",
            "request_addr = #{requestAddr,jdbcType=VARCHAR},",
            "status = #{status,jdbcType=INTEGER},",
            "close_reason = #{closeReason,jdbcType=INTEGER},",
            "gmt_last_execution = #{gmtLastExecution,jdbcType=TIMESTAMP},",
            "env = #{env,jdbcType=INTEGER}",
            "where id = #{id,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(TransChannelRequestPo record);
}